<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android Jetpack - Navigation 组件踩坑日记</title>
    <url>/2019/11/21/android-jetpack-navgation-notes/</url>
    <content><![CDATA[<blockquote>
<p>java.lang.IllegalArgumentException: navigation destination <code>NAVAGATION_ACTION_ID</code> is unknown to this NavController</p>
</blockquote>
<p>当我发呆时，无意用手指同时点击了2个包含 <code>Navigation</code> 跳转的 Item，触发了这个问题。</p>
<a id="more"></a>

<p>修复前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Navigation.findNavController(view).navigate(NAVAGATION_ACTION_ID);</span><br></pre></td></tr></table></figure>

<p>修复后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NavController navController = Navigation.findNavController(view);</span><br><span class="line">NavDestination currentDestination = navController.getCurrentDestination();</span><br><span class="line"><span class="keyword">if</span> (currentDestination != <span class="keyword">null</span> &amp;&amp; currentDestination.getId() == CURRENT_ID)</span><br><span class="line">    navController.navigate(NAVAGATION_ACTION_ID)；</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android Jetpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio Gradle 自动版本控制</title>
    <url>/2017/02/04/android-studio-gradle-auto-version-control/</url>
    <content><![CDATA[<p>这篇文章缘起在酷安上，<a href="https://neofelhz.space/">neoFelhz</a> 与我的对话。</p>
<p><img src="https://ooo.0o0.ooo/2017/02/03/5894910cb3570.png"></p>
<p>经过了我的这个 APP 第三次 Release 之后，我突然觉得，自动版本控制还是很重要的，但是我觉得 SemVer 对于我的小项目过于繁琐，因此有了这篇文章。</p>
<a id="more"></a>

<p>会 <code>git diff</code> 的盆友，可以直接看这条 commit 快速 GET 这项技能。</p>
<p><a href="https://github.com/Omico/CurrentActivity/commit/96af43e2b8b4cff53020889a6a91f40b0ceb32fe">https://github.com/Omico/CurrentActivity/commit/96af43e2b8b4cff53020889a6a91f40b0ceb32fe</a></p>
<h2 id="自动版本号（versionCode）"><a href="#自动版本号（versionCode）" class="headerlink" title="自动版本号（versionCode）"></a>自动版本号（versionCode）</h2><p>关于自动版本号，我就像图片里说的，我认为用 commit id 的个数就能很好表达。</p>
<p>通过参考 git 文档，我得出以下命令：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> getVersionCode() &#123;</span><br><span class="line">    <span class="keyword">def</span> cmd = <span class="string">&#x27;git rev-list HEAD --count&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> cmd.execute().text.trim().<span class="keyword">toInteger</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样能通过统计所有 commit id 的个数来确定版本号。</p>
<h2 id="自动版本名（versionName）"><a href="#自动版本名（versionName）" class="headerlink" title="自动版本名（versionName）"></a>自动版本名（versionName）</h2><p>关于自动版本名，这个灵感来自一次无意间的思考，在我编译 Android 系统的时候，内核的版本号的生成让我比较好奇。</p>
<p>因此我翻阅了 kernel 的源码，在 <code>&lt;内核根目录&gt;/scripts/setlocalversion</code> 这个文件中，我发现了我要的，看到是由 <code>git describe</code> 这个命令实现的，于是我翻阅了 git 文档，经过一番探索，我得出了以下命令：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> getVersionName() &#123;</span><br><span class="line">    <span class="keyword">def</span> cmd = <span class="string">&#x27;git describe --tags --dirty&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> cmd.execute().text.trim()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样得到的版本名就是你的 Tag 名。</p>
<p>当你的工作区最后一次 commit id 与你的最新 Tag 的 commit id 相同时，你的版本名就会是<code>&lt;最后一个 Tag 名&gt;</code></p>
<p>例如：</p>
<blockquote>
<p>v1.0.8</p>
</blockquote>
<p>当你的工作区最后一次 commit id 与你的最新 Tag 的 commit id 相同，但修改了项目工程时，你的版本名就会是<code>&lt;最后一个 Tag 名&gt;-dirty</code></p>
<p>例如：</p>
<blockquote>
<p>v1.0.8-dirty</p>
</blockquote>
<p>当你的工作区没有提交新的 Tag ，但有新的 commit 时，你的版本名就会是<code>&lt;最后一个 Tag 名&gt;-&lt;在最后一个 Tag 之后，提交 commit 的个数&gt;-g&lt;commit id 的前七位&gt;</code></p>
<p>例如：</p>
<blockquote>
<p>v1.0.8-1-g96af43e</p>
</blockquote>
<p>当你的工作区没有提交新的 Tag ，也没有新的 commit ，但修改了项目工程时，你的版本名就会是<code>&lt;最后一个 Tag 名&gt;-&lt;在最后一个 Tag 之后，提交 commit 的个数&gt;-g&lt;commit id 的前七位&gt;-dirty</code></p>
<p>例如：</p>
<blockquote>
<p>v1.0.8-1-g96af43e-dirty</p>
</blockquote>
<h2 id="在工程里应用"><a href="#在工程里应用" class="headerlink" title="在工程里应用"></a>在工程里应用</h2><p>修改前：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;25.0.2&quot;</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;me.omico.currentactivity&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">19</span></span><br><span class="line">        targetSdkVersion <span class="number">25</span></span><br><span class="line">        versionCode <span class="number">4</span></span><br><span class="line">        versionName <span class="string">&quot;1.0.3&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">&#x27;*.jar&#x27;</span>], dir: <span class="string">&#x27;libs&#x27;</span>)</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;com.android.support:appcompat-v7:25.1.1&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;com.android.support:design:25.1.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改后：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;25.0.2&quot;</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;me.omico.currentactivity&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">19</span></span><br><span class="line">        targetSdkVersion <span class="number">25</span></span><br><span class="line">        versionCode getVersionCode()</span><br><span class="line">        versionName getVersionName()</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">&#x27;*.jar&#x27;</span>], dir: <span class="string">&#x27;libs&#x27;</span>)</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;com.android.support:appcompat-v7:25.1.1&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;com.android.support:design:25.1.1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getVersionCode() &#123;</span><br><span class="line">    <span class="keyword">def</span> cmd = <span class="string">&#x27;git rev-list HEAD --first-parent --count&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> cmd.execute().text.trim().<span class="keyword">toInteger</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getVersionName() &#123;</span><br><span class="line">    <span class="keyword">def</span> cmd = <span class="string">&#x27;git describe --tags --dirty&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> cmd.execute().text.trim()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考链接：<br><a href="https://git-scm.com/docs/git-rev-list">https://git-scm.com/docs/git-rev-list</a><br><a href="https://git-scm.com/docs/git-describe">https://git-scm.com/docs/git-describe</a></p>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android Studio</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio 借助 Gradle 语法使项目更易于管理</title>
    <url>/2017/02/02/android-studio-make-the-project-easier-to-manager-with-gradle-syntax/</url>
    <content><![CDATA[<p>最近写了一个<a href="https://github.com/Omico/CurrentActivity">当前进程</a>的 APP ，有<code>方便一些高阶机油进行写轮眼校调</code>等作用。</p>
<p>随着版本的衍进，修改版本号和升级 <code>Android Support Library</code> 变得繁复。</p>
<p>因此，我开始借用 <code>Gradle</code> 语法，让项目更易于管理。</p>
<a id="more"></a>

<p>以下开始分步骤进行教学。</p>
<p>会 <code>git diff</code> 的盆友，可以直接看这条 commit 快速 GET 这项技能。</p>
<p><a href="https://github.com/Omico/CurrentActivity/commit/a535c03b88734bc1266dddbca5c03c5f3f017dc4">https://github.com/Omico/CurrentActivity/commit/a535c03b88734bc1266dddbca5c03c5f3f017dc4</a></p>
<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>新建一个 <code>config.gradle</code> 的 <code>Gradle</code> 配置文件。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    compileSdkVersion = <span class="number">25</span>    <span class="comment">//你的编译 SDK 版本</span></span><br><span class="line">    buildToolsVersion = <span class="string">&quot;25.0.2&quot;</span>    <span class="comment">//你的编译工具 SDK 版本</span></span><br><span class="line"></span><br><span class="line">    app = [</span><br><span class="line">            applicationId   : <span class="string">&quot;me.omico.currentactivity&quot;</span>,    <span class="comment">//你的 APP 包名</span></span><br><span class="line">            minSdkVersion   : <span class="number">19</span>,    <span class="comment">//你的 APP 最小兼容的 API 版本</span></span><br><span class="line">            targetSdkVersion: <span class="number">25</span>,    <span class="comment">//你的测试机的 API 版本</span></span><br><span class="line">            versionCode     : <span class="number">4</span>,    <span class="comment">//用于版本升级所用的版本号，int 类型，可以用于判断应用是否需要升级</span></span><br><span class="line">            versionName     : <span class="string">&quot;1.0.3&quot;</span>    <span class="comment">//通俗意义上的版本号，显示给用户看</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">dependencies</span> = [</span><br><span class="line">            supportLibraryVersion: <span class="string">&quot;25.1.1&quot;</span>    <span class="comment">//Android Support Library 版本</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此配置文件的作用是集中管理定义项。</p>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>接着，光定义了还是不行的，我们需要把这个配置文件引入，让 <code>Gradle</code> 识别。</p>
<p>修改你的项目根目录的 <code>build.gradle</code> ，加入以下代码。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply <span class="keyword">from</span>: <span class="string">&quot;config.gradle&quot;</span>    <span class="comment">//引入你定义的 Gradle 配置文件</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line">apply <span class="keyword">from</span>: <span class="string">&quot;config.gradle&quot;</span>    <span class="comment">//引入你定义的 Gradle 配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">&#x27;com.android.tools.build:gradle:2.2.3&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>以上你已经定义并引入你的定义到工程里了。</p>
<p>接下来，我们来修改你的工程 <code>app</code> 目录下的 <code>build.gradle</code> ，让 <code>config.gradle</code> 生效。</p>
<p>这里直接通过修改前后的对比，这样能更为直接的说明问题。</p>
<h3 id="修改前"><a href="#修改前" class="headerlink" title="修改前"></a>修改前</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;25.0.2&quot;</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;me.omico.currentactivity&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">19</span></span><br><span class="line">        targetSdkVersion <span class="number">25</span></span><br><span class="line">        versionCode <span class="number">4</span></span><br><span class="line">        versionName <span class="string">&quot;1.0.3&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">&#x27;*.jar&#x27;</span>], dir: <span class="string">&#x27;libs&#x27;</span>)</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;com.android.support:appcompat-v7:25.1.1&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;com.android.support:design:25.1.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion rootProject.ext.compileSdkVersion</span><br><span class="line">    buildToolsVersion rootProject.ext.buildToolsVersion</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId rootProject.ext.app.applicationId</span><br><span class="line">        minSdkVersion rootProject.ext.app.minSdkVersion</span><br><span class="line">        targetSdkVersion rootProject.ext.app.targetSdkVersion</span><br><span class="line">        versionCode rootProject.ext.app.versionCode</span><br><span class="line">        versionName rootProject.ext.app.versionName</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">&#x27;*.jar&#x27;</span>], dir: <span class="string">&#x27;libs&#x27;</span>)</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;com.android.support:appcompat-v7:$rootProject.ext.dependencies.supportLibraryVersion&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;com.android.support:design:$rootProject.ext.dependencies.supportLibraryVersion&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>以上你已经完成了定义你一定看到了 <code>Android Studio</code> 提示需要重新同步的字样了吧。</p>
<p><img src="https://ooo.0o0.ooo/2017/02/02/5892e7d3dbfd2.png"></p>
<p>点击 <code>Sync Now</code> 后运行你的 APP 验证无误后，那么恭喜你又 GET 一项技能。</p>
<p>下次再需要修改这些定义项的时候你只需要修改 <code>config.gradle</code> 就可以了。</p>
<p>其实 <code>Gradle</code> 的强大不止于此，这里只是简单说说其中的一小点。</p>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android Studio</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>作为一个 Android 玩机人士必须熟悉的常识性问题</title>
    <url>/2017/02/07/android-user-from-naive-to-experienced/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>具体看以下链接：</p>
<p><a href="http://weibo.com/5344594676/EujFal96K">http://weibo.com/5344594676/EujFal96K</a></p>
<p>作为一个辣鸡 Android 开发者，我表示无话(Fxxk)可说，为什么？具体看下面。</p>
<p>注：以下都是在 Android 的方面上通俗的讲，不一定能代表其他方面或其他编程语言。</p>
<a id="more"></a>

<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="问：源码是什么，源码和编译的关系是是什么？"><a href="#问：源码是什么，源码和编译的关系是是什么？" class="headerlink" title="问：源码是什么，源码和编译的关系是是什么？"></a>问：源码是什么，源码和编译的关系是是什么？</h3><p>答：</p>
<blockquote>
<p>在现代程序语言中，源代码可以是以书籍或者磁带的形式出现；<br>但最常用的格式是文本文件，这种典型格式的目的是为了编译出计算机程序。<br>计算机源代码的最终目的是将人类可读的文本翻译成为计算机可以执行的二进制指令，这种过程叫做编译，通过编译器完成。</p>
</blockquote>
<p>来源：</p>
<p><a href="https://zh.wikipedia.org/wiki/%E6%BA%90%E4%BB%A3%E7%A0%81">https://zh.wikipedia.org/wiki/源代码</a></p>
<h3 id="问：反编译是什么？"><a href="#问：反编译是什么？" class="headerlink" title="问：反编译是什么？"></a>问：反编译是什么？</h3><p>答：</p>
<blockquote>
<p>反编译就是把二进制文件转化成源码的过程。<br>（注：这里只说 Android ， Android Java 部分的反编译是可以把 apk 里 <code>class.dex</code> 转化成中间代码 <code>xx.smali</code> ，<br>或完全转化回源码 <code>*.java</code> 状态的。）</p>
</blockquote>
<h3 id="问：插桩是什么？"><a href="#问：插桩是什么？" class="headerlink" title="问：插桩是什么？"></a>问：插桩是什么？</h3><p>答：</p>
<blockquote>
<p>在安卓方面，插桩通常是指在 ROM 中通过反编译的方式获得中间代码 <code>xx.smali</code> ，<br>然后通过对中间代码的修改加入自定义的功能，达到为ROM添加功能的目的。<br>像 MIUI 、 Flyme 、 TOS 就是通过这种手段为第三方机型适配的。</p>
</blockquote>
<h3 id="问：移植是什么？"><a href="#问：移植是什么？" class="headerlink" title="问：移植是什么？"></a>问：移植是什么？</h3><p>答：</p>
<blockquote>
<p>在安卓方面，移植通常是指在不同机型但 CPU 相同的情况下通过替换其原厂 ROM 包里的文件的形式进行的适配，<br>也可以是相似或跨平台（高通、联发科、海思麒麟），只不过替换难度更大，更耗时，硬件差异较大时可能会导致某些 bug 无法修复的情况。</p>
</blockquote>
<h3 id="问：所以说适配到底是什么？"><a href="#问：所以说适配到底是什么？" class="headerlink" title="问：所以说适配到底是什么？"></a>问：所以说适配到底是什么？</h3><p>答：</p>
<blockquote>
<p>在大家嘴中总能听到这个词，但是我想大多数人都没搞清楚什么是适配。<br>在通过和广大机油的聊天中，我渐渐明白什么大家嘴中的适配实际包含了源码编译适配、插桩（Patchrom）和拼凑替换适配俗称移植。。。<br>（所以出现了一些奇奇怪怪的 naive 机油，我想连他们自己都不知道适配到底是什么吧，只是听别人这么说而已。。。）<br>最后用一句话解释适配那就是为这个机型做包。</p>
</blockquote>
<p>（以上是我的理解，如果有异议，请指教！）</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>关于本文的出现的偏差欢迎指正。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>在 WSL2 下编译适用于 Android 的 Chromium 踩坑日志</title>
    <url>/2020/10/16/compile-chromium-for-android-under-WSL2/</url>
    <content><![CDATA[<p>前天睡不着，脑子里在想在 Android 上 Chrome 是怎么获取网站的 favicon 的。于是，直接爬起来下载了一份适用于 Android 的 Chromium 源码，准备扒开看看。</p>
<p>下完后，按照个人习惯，先跑一遍编译，可是在编译的过程中遇到了些小坑，遂有了这篇水文。</p>
<p><del>为了这篇文章，我不得不拾起我将近一年没有维护的博客，重建博客也花了不少时间。</del></p>
<a id="more"></a>

<p>安装 WSL2 的部分略过，这不属于本文的范畴，只需简简单单按照微软给出的<a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">官方文档</a>就可以很轻松的完成安装。</p>
<p>已下开始进入正文，我用的是 <code>Ubuntu 20.04</code> 作为编译环境。</p>
<h2 id="需要的依赖"><a href="#需要的依赖" class="headerlink" title="需要的依赖"></a>需要的依赖</h2><p>下载以及编译 Chromium 需要自行安装 Git 和 Python 2。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install git python</span><br></pre></td></tr></table></figure>

<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>根据 Chromium 给出的<a href="https://chromium.googlesource.com/chromium/src/+/master/docs/android_build_instructions.md">官方文档</a>依次运行已下命令。</p>
<h3 id="下载用于下载源码的工具"><a href="#下载用于下载源码的工具" class="headerlink" title="下载用于下载源码的工具"></a>下载用于下载源码的工具</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://chromium.googlesource.com/</span><br><span class="line">chromium/tools/depot_tools.git</span><br></pre></td></tr></table></figure>

<h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;$PATH:$HOME/depot_tools&quot;</span><br></pre></td></tr></table></figure>

<p>把工具路径加入环境变量中，方便调用。实际上为了下次不再输入这个命令，我手动加入到 .zshrc 里了。.zshrc 是 zsh 的配置文件，zsh 的安装不在本文范围内。你可以根据自身需求将以下命令加入到 .bashrc 或 /etc/profile 里。</p>
<h3 id="创建源码目录，以及下载源码"><a href="#创建源码目录，以及下载源码" class="headerlink" title="创建源码目录，以及下载源码"></a>创建源码目录，以及下载源码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/chromium &amp;&amp; cd ~/chromium</span><br><span class="line">fetch --nohooks android</span><br></pre></td></tr></table></figure>

<p>文档中提到：</p>
<blockquote>
<p>If you don’t want the full repo history, you can save a lot of time by adding the –no-history flag to fetch.</p>
</blockquote>
<p>我并不需要源码的历史记录因此我真正运行的命令是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/chromium &amp;&amp; cd ~/chromium</span><br><span class="line">fetch --nohooks --no-history android</span><br></pre></td></tr></table></figure>

<h3 id="下载编译-Chromium-的依赖"><a href="#下载编译-Chromium-的依赖" class="headerlink" title="下载编译 Chromium 的依赖"></a>下载编译 Chromium 的依赖</h3><p>根据文档所说我们需要进入 <code>src</code> 目录，写入文件声明目标系统是 Android，并开始同步 Android 所需的依赖库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd src</span><br><span class="line">echo &quot;target_os = [ &#x27;android&#x27; ]&quot; &gt;&gt; ../.gclient</span><br><span class="line">gclient sync</span><br></pre></td></tr></table></figure>

<p>文档中还提到，在编译适用于 Android 的 Chromium 之前，需要下载安装额外的依赖。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在 src 目录下运行</span></span><br><span class="line">build/install-build-deps-android.sh</span><br></pre></td></tr></table></figure>

<p>注意在 WSL2 下安装 Snapcraft 会报错，通过 <a href="https://discourse.ubuntu.com/t/using-snapd-in-wsl2/12113">Google 到的解决方法</a>依次运行以下两条命令得以正常安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target</span><br><span class="line">exec sudo nsenter -t $(pidof systemd) -a su - $LOGNAME</span><br></pre></td></tr></table></figure>

<p>然后接着看文档，文档中说我们还需要运行钩子以安装额外依赖。</p>
<p><img src="https://i.loli.net/2020/10/16/meJyCEs1jupYg7x.jpg" alt="好！很有精神！"></p>
<p>好！很有精神！</p>
<p>装就完事了~</p>
<blockquote>
<p>Once you’ve run install-build-deps at least once, you can now run the Chromium-specific hooks, which will download additional binaries and other things you might need:</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gclient runhooks</span><br></pre></td></tr></table></figure>

<p>另外文档中提到可以申请 API keys 用以调用谷歌服务，这里用不到略过了~</p>
<blockquote>
<p>Optional: You can also install API keys if you want your build to talk to some Google services, but this is not necessary for most development and testing purposes.</p>
</blockquote>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>终于可以开始编译，根据文档所说我们需要运行已下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gn args out/Default</span><br></pre></td></tr></table></figure>

<p>并将已下内容写入到 <code>out/Default/args.gn</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">target_os = &quot;android&quot;</span><br><span class="line">target_cpu = &quot;arm64&quot;  # See &quot;Figuring out target_cpu&quot; below</span><br></pre></td></tr></table></figure>

<p>这里我一切照搬，因为现在的 Android 手机都是 64 位系统了，所以 <code>target_cpu</code> 是 <code>arm64</code>。</p>
<p>我不喜欢使用 vim 输入因此直接 <code>:qa</code> 退出，并通过 VS Code 修改。</p>
<p>最后运行以下命令就可以开始编译了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">autoninja -C out/Default chrome_public_apk</span><br></pre></td></tr></table></figure>

<p>经过一段漫长的等待我们可以在 <code>out/Default/apks</code> 下看到我们的成品 <code>ChromePublic.apk</code></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>安装打开使用一切都很顺利。</p>
<p>顺带查看了下版本号，发现了点有意思的事情。</p>
<table>
<thead>
<tr>
<th>Variants</th>
<th>Version</th>
</tr>
</thead>
<tbody><tr>
<td>Chrome</td>
<td>86.0.4240.75</td>
</tr>
<tr>
<td>Chrome Canary</td>
<td>88.0.4291.0</td>
</tr>
<tr>
<td>自己编译的 Chromium</td>
<td>88.0.4292.0</td>
</tr>
</tbody></table>
<p>由此可以看出，谷歌对 Chrome 的测试还是非常严格的。通过查看<a href="https://www.chromium.org/developers/version-numbers">文档</a>也可以进一步说明此问题。</p>
<p>最后也在漫长的编译等待过程中找到了调用 favicon 的部分代码，全是通过 JNI 操作 C 来调用的。好吧我就知道，这种大型的跨平台应用为了节约各种成本，一定会共用大量代码，而不可能老老实实用 Java 在 Android 上全部写一遍的~</p>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>WSL2</tag>
        <tag>WSL</tag>
        <tag>Chromium</tag>
        <tag>Compile</tag>
      </tags>
  </entry>
  <entry>
    <title>博客主题迁移到 NexT</title>
    <url>/2020/10/15/hexo-theme-migrate-to-next/</url>
    <content><![CDATA[<p>已经很久没有维护博客了，打算把昨天睡不着后爬起来的下了一份 Chromium Android 的源码编译的过程水出一篇博文，结果发现之前用的主题已经停止维护了。</p>
<p>在众多主题中一眼相中了 <code>NexT</code>。</p>
<p>花了些时间不断微调配置，总算是好了。</p>
<p>还在考虑之前的博文要不要删掉，感觉文笔实在差劲。。。<del>现在也是</del></p>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>自言自语</tag>
        <tag>Hexo</tag>
        <tag>Hexo theme</tag>
      </tags>
  </entry>
  <entry>
    <title>雷蛇手机2解锁 bootloader</title>
    <url>/2019/12/27/razer-phone-2-unlocking-the-bootloader/</url>
    <content><![CDATA[<p>在阅读本教程前你需要 <code>adb</code> 和 <code>fastboot</code> 工具（<a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">在此下载</a>）</p>
<blockquote>
<p>注意！在解锁前请自行备份手机数据！！！</p>
<p>注意！在解锁前请自行备份手机数据！！！</p>
<p>注意！在解锁前请自行备份手机数据！！！</p>
</blockquote>
<a id="more"></a>

<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>进入开发者模式</p>
<p>开启 OEM 解锁</p>
<p>开启 USB 调试</p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>使用 ADB 命令进入 bootloader</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure>

<p>当进入 bootloader 后，依次运行已下命令，并按照手机上提示进行操作：</p>
<blockquote>
<p>这会导致清除本机所有数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot flashing unlock</span><br><span class="line">fastboot flashing unlock_critical</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Razer</tag>
        <tag>Razer Phone 2</tag>
        <tag>unlock bootloader</tag>
      </tags>
  </entry>
  <entry>
    <title>repo 的妙用</title>
    <url>/2017/07/31/the-magical-effect-of-repo/</url>
    <content><![CDATA[<blockquote>
<p>这个想法已经在我心底很久了，然而一直没着手去验证是否可行，终于，在今天。。。</p>
</blockquote>
<p>弄过 Android 源码编译的小伙伴都知道，<code>repo</code> 是管理 Android 项目的工具。</p>
<p>我们通过 <code>repo init [url]</code> 来初始化项目仓库。</p>
<p>这时，我们的当前目录下会生成一个 <code>.repo</code> 目录，我们可以在 <code>.repo</code> 下新建一个 <code>local_manifests</code>，并在其目录下新建一个任意名字的 XML 文件，当我们 <code>repo sync</code> 后，<code>local_manifests</code> 里 XML 文件中的内容也会一起被同步。</p>
<p>通过 <code>.repo/docs/manifest-format.txt</code> 我得知 repo 可以通过以下代码来创建软链接。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">linkfile</span> <span class="attr">src</span>=<span class="string">&quot;real_file_or_dir_path&quot;</span> <span class="attr">dest</span>=<span class="string">&quot;source_path&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>由于我硬盘内存放大量不同的 Android 源码（ Lineage 、 Mokee 等等）。但是，有些是可以通用的，比如 kernel 亦或者从厂商 ROM 里拉取的 vendor。</p>
<p>由此我不经在想，我能否通过上述 repo 的语法从本地弄一个软链接，让多套源码共用，以达到节省本地硬盘空间的目的呢？</p>
<p>通过实验证明，我的想法是可以实现的。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>首先我们在 GitHub 或者码云创建一个项目仓库。</p>
<p>PS：如果不想让别人看到的话推荐用码云，可以免费创建私有仓库。</p>
<p>创建仓库的目的有两点：</p>
<p>第一，这是 linkfile 执行的基础。</p>
<p>文字解释过于麻烦，我们结合下面一段代码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project</span> <span class="attr">path</span>=<span class="string">&quot;omico/linker&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Omico/linker&quot;</span> <span class="attr">remote</span>=<span class="string">&quot;github&quot;</span> <span class="attr">revision</span>=<span class="string">&quot;master&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linkfile</span> <span class="attr">src</span>=<span class="string">&quot;/home/yuwen/1&quot;</span> <span class="attr">dest</span>=<span class="string">&quot;test1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">linkfile</span> <span class="attr">src</span>=<span class="string">&quot;/home/yuwen/2&quot;</span> <span class="attr">dest</span>=<span class="string">&quot;test2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上是一段示例，结果是 test1 被创建成功，而 test2 并没有。</p>
<p>第二，我们可以通过此仓库来实现备份</p>
<p>至此，结束。</p>
<p>还有疑问的可以参考我这个公开的仓库。</p>
<p><a href="https://github.com/Omico/linker">https://github.com/Omico/linker</a></p>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>新的起点</title>
    <url>/2017/01/23/the-new-start/</url>
    <content><![CDATA[<p>转眼之间已经到了2017年。。。</p>
<p>学业上，我结束了大学的第一个学期。</p>
<p>技术上，我在 Android 的坑里越陷越深。</p>
<p>新的一年我想我应该要有些新的变化，因此我决定开始接触博客这个新坑，希望写博客这个习惯能伴随我一生吧。。。</p>
<p>好像没有什么要写的了，这篇就当作纪念我开始写博客吧，就酱～</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>自言自语</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 @Keep 注入阻止混淆代码</title>
    <url>/2017/01/30/use-keep-annotation-to-prevent-obfuscated-code/</url>
    <content><![CDATA[<p>今天在看 Google Samples 的时候看到一个 @Keep 注入，于是在文档里查了一下，意外发现一个非常有用的东西，于是拿来分享给大家。</p>
<p>首先来说说 @Keep 是什么。</p>
<blockquote>
<p>Denotes that the annotated element should not be removed when the code is minified at build time. This is typically used on methods and classes that are accessed only via reflection so a compiler may think that the code is unused.</p>
</blockquote>
<a id="more"></a>

<p>翻译（以下翻译来自谷歌）：</p>
<blockquote>
<p>表示在构建时缩减代码时不应删除带注释的元素。 这通常用于只通过反射访问的方法和类，因此编译器可能认为代码未使用。</p>
</blockquote>
<p>已经说的很明白了，而且也把缺点说了，编译器会认为带有 @Keep 注释的会是未被使用过的代码，因此在 Android Studio 里，代码会提示 warning ，像下图所示</p>
<p><img src="https://ooo.0o0.ooo/2017/01/31/5890620f71e4c.png"></p>
<p>所以有代码洁癖的我还是放弃使用这个注入，继续使用 ProGuard 。</p>
<p>参考资料：</p>
<p><a href="https://developer.android.com/reference/android/support/annotation/Keep.html">https://developer.android.com/reference/android/support/annotation/Keep.html</a></p>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android Studio</tag>
      </tags>
  </entry>
</search>
